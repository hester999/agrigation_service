// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=./mock/mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "app/internal/model"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MocksubscriptionRepo is a mock of subscriptionRepo interface.
type MocksubscriptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MocksubscriptionRepoMockRecorder
	isgomock struct{}
}

// MocksubscriptionRepoMockRecorder is the mock recorder for MocksubscriptionRepo.
type MocksubscriptionRepoMockRecorder struct {
	mock *MocksubscriptionRepo
}

// NewMocksubscriptionRepo creates a new mock instance.
func NewMocksubscriptionRepo(ctrl *gomock.Controller) *MocksubscriptionRepo {
	mock := &MocksubscriptionRepo{ctrl: ctrl}
	mock.recorder = &MocksubscriptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksubscriptionRepo) EXPECT() *MocksubscriptionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MocksubscriptionRepo) Create(service model.Subscription) (model.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", service)
	ret0, _ := ret[0].(model.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MocksubscriptionRepoMockRecorder) Create(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocksubscriptionRepo)(nil).Create), service)
}

// DeleteByID mocks base method.
func (m *MocksubscriptionRepo) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MocksubscriptionRepoMockRecorder) DeleteByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MocksubscriptionRepo)(nil).DeleteByID), id)
}

// GetAll mocks base method.
func (m *MocksubscriptionRepo) GetAll(limit, offset int) (model.GetAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit, offset)
	ret0, _ := ret[0].(model.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MocksubscriptionRepoMockRecorder) GetAll(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MocksubscriptionRepo)(nil).GetAll), limit, offset)
}

// GetByID mocks base method.
func (m *MocksubscriptionRepo) GetByID(id string) (model.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(model.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MocksubscriptionRepoMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MocksubscriptionRepo)(nil).GetByID), id)
}

// GetTotalPrice mocks base method.
func (m *MocksubscriptionRepo) GetTotalPrice(userID, serviceName string, from, to time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPrice", userID, serviceName, from, to)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPrice indicates an expected call of GetTotalPrice.
func (mr *MocksubscriptionRepoMockRecorder) GetTotalPrice(userID, serviceName, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPrice", reflect.TypeOf((*MocksubscriptionRepo)(nil).GetTotalPrice), userID, serviceName, from, to)
}

// Update mocks base method.
func (m *MocksubscriptionRepo) Update(service model.Subscription) (model.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", service)
	ret0, _ := ret[0].(model.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MocksubscriptionRepoMockRecorder) Update(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocksubscriptionRepo)(nil).Update), service)
}
